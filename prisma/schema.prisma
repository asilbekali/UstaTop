// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Connection tables

model region {
  id   Int    @id @default(autoincrement())
  name String
  user user[]
}

model user {
  id        Int         @id @default(autoincrement())
  full_name String
  password  String
  email     String      @unique
  region    region      @relation(fields: [regionId], references: [id])
  type      UserType
  bank      String?
  address   String?
  okend     String?
  inn       String?
  pc        String?
  mfo       String?
  createAt  DateTime    @default(now())
  regionId  Int
  role      role
  status    UserStatus?
}

model level {
  id            Int             @id @default(autoincrement())
  name          String
  createAt      DateTime        @default(now())
  order_iteam   order_iteam[]
  productLevel  productLevel[]
  masterProduct masterProduct[]
}

model brend {
  id       Int      @id @default(autoincrement())
  name     String
  createAt DateTime @default(now())
  tools    tools[]
}

model size {
  id       Int      @id @default(autoincrement())
  name     String
  createAt DateTime @default(now())
  tools    tools[]
}

model tools {
  id           Int            @id @default(autoincrement())
  name         String
  price        Int
  count        Int
  code         Int            @unique @default(autoincrement())
  isActive     Boolean        @default(false)
  capasityId   Int
  capasity     capasity       @relation(fields: [capasityId], references: [id])
  size         size           @relation(fields: [sizeId], references: [id])
  image        String
  createAt     DateTime       @default(now())
  sizeId       Int
  brend        brend          @relation(fields: [brendId], references: [id])
  brendId      Int
  order_iteam  order_iteam[]
  productTools productTools[]
}

model capasity {
  id       Int      @id @default(autoincrement())
  name     String
  createAt DateTime @default(now())
  tools    tools[]
}

// poisfdffffffffffffffffffffffffdvndodivfndo;invo;dsnfvvodnfvopdnsvopndsfvpjsndfvdsknvpopkmwkdjdvfnk;jfvnwk;edjfvno;ewjvn;owejvno;wejrnvo;ewnvno;ewrvno;wienrvio;weinvwo;nevoenovinkovn

model product {
  id            Int             @id @default(autoincrement())
  name          String
  isActive      Boolean         @default(false)
  image         String
  createAt      DateTime        @default(now())
  order_iteam   order_iteam[]
  productLevel  productLevel[]
  productTools  productTools[]
  masterProduct masterProduct[] // adawd
}

// /---------------------------------------------------------------------------

model productLevel {
  id        Int     @id @default(autoincrement())
  productId Int
  product   product @relation(fields: [productId], references: [id])
  levelId   Int
  level     level   @relation(fields: [levelId], references: [id])

  minWorkHour Int
  priceHour   Int
  priceDay    Int
  createAt    DateTime @default(now())
}

model productTools {
  id        Int      @id @default(autoincrement())
  productId Int
  product   product  @relation(fields: [productId], references: [id])
  toolsId   Int
  tools     tools    @relation(fields: [toolsId], references: [id])
  createAt  DateTime @default(now())
}

// poisfdffffffffffffffffffffffffdvndodivfndo;invo;dsnfvvodnfvopdnsvopndsfvpjsndfvdsknvpopkmwkdjdvfnk;jfvnwk;edjfvno;ewjvn;owejvno;wejrnvo;ewnvno;ewrvno;wienrvio;weinvwo;nevoenovinkovn

model master {
  id            Int             @id @default(autoincrement())
  full_name     String
  email         String          @unique()
  isActive      Boolean         @default(true)
  year          Int
  image         String
  passpoerImage String
  star          Int
  about         String
  createAt      DateTime        @default(now())
  masterProduct masterProduct[]
}

// /---------------------------------------------------------------------------

model masterProduct {
  id          Int      @id @default(autoincrement())
  productId   Int
  product     product  @relation(fields: [productId], references: [id])
  minWorkHour Int
  levelId     Int
  level       level    @relation(fields: [levelId], references: [id])
  priceHour   Int
  priceDay    Int
  exprience   Int
  masterId    Int
  master      master   @relation(fields: [masterId], references: [id])
  createAt    DateTime @default(now())
}

// /////////////////////////////////////////////////////////////////////////////

// poisfdffffffffffffffffffffffffdvndodivfndo;invo;dsnfvvodnfvopdnsvopndsfvpjsndfvdsknvpopkmwkdjdvfnk;jfvnwk;edjfvno;ewjvn;owejvno;wejrnvo;ewnvno;ewrvno;wienrvio;weinvwo;nevoenovinkovn

model comment {
  id       Int      @id @default(autoincrement())
  message  String
  stars    Int
  masterId Int
  createAt DateTime @default(now())
}

model order_iteam {
  id           Int      @id @default(autoincrement())
  product      product  @relation(fields: [productId], references: [id])
  productLevel level    @relation(fields: [levelId], references: [id])
  count        Int
  measuer      measuer
  total        Int
  location     String
  address      String
  data         DateTime
  pymentType   String
  withDeliver  Boolean
  status       Boolean  @default(true)
  tools        tools    @relation(fields: [toolsId], references: [id])
  createAt     DateTime @default(now())
  productId    Int
  levelId      Int
  toolsId      Int
  backetId     Int
  backet       backet   @relation(fields: [backetId], references: [id])
}

model order {
  id                Int                 @id @default(autoincrement())
  createAt          DateTime            @default(now())
  admin_check_order admin_check_order[]
  backetId          Int
  backet            backet              @relation(fields: [backetId], references: [id])
}

model backet {
  id          Int           @id @default(autoincrement())
  createAt    DateTime      @default(now())
  order_iteam order_iteam[]
  order_Id    Int
  order       order[]
}

model admin_check_order {
  id       Int      @id @default(autoincrement())
  order    order    @relation(fields: [orderId], references: [id])
  orderId  Int
  status   status
  createAt DateTime @default(now())
}

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// No SQL tables

model my_sessions {
  id         Int      @id @default(autoincrement())
  deviceName String
  deviceIP   String
  createAt   DateTime @default(now())
}

model showCase {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  image       String
  link        String
}

model general {
  id        Int    @id @default(autoincrement())
  email     String
  links     String
  phone     String
  addminsTg String
}

model sugesstion {
  id       Int    @id @default(autoincrement())
  name     String
  suerName String
  message  String
}

model partners {
  id    Int    @id @default(autoincrement())
  name  String
  image String
}

model faq {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
}

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Enuml

enum UserType {
  yuridik
  fizichski
}

enum measuer {
  day
  hour
}

enum status {
  active
  pending
  rejected
  payed
}

enum role {
  admin
  super_admin
  viwer_admin
  user_fiz
  user_yur
}

enum UserStatus {
  active
  noActive
}
